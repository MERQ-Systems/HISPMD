import os
from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_community.utilities import SQLDatabase
from langchain_core.output_parsers import StrOutputParser
from langchain_groq import ChatGroq
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
#import sshtunnel

# Load environment variables from .env file
load_dotenv()

# Function to initialize PostgreSQL database connection
def init_database() -> SQLDatabase:
    user = os.getenv('POSTGRES_USER')
    password = os.getenv('POSTGRES_PASSWORD')
    host = os.getenv('POSTGRES_HOST')
    port = os.getenv('POSTGRES_PORT')
    database = os.getenv('POSTGRES_DB')
    db_uri = f"postgresql+psycopg2://{user}:{password}@{host}:{port}/{database}"
    return SQLDatabase.from_uri(db_uri)

# Function to handle SQLInterfaceError: Commands out of sync
def run_query(db, query):
    try:
        result = db.run(query)
        return result
    except Exception as e:
        st.error(f"Error executing query: {str(e)}")

# Function to get SQL chain for processing user queries
def get_sql_chain(db):
    template = """
    You are a senior data analyst at MERQ Consultancy. You are interacting with a user who is asking you questions about the HISPMD's database.
    Based on the table schema below, write a SQL query that would answer the user's question. Take the conversation history into account.

    <SCHEMA>{schema}</SCHEMA>

    Conversation History: {chat_history}

    Write only the SQL query and nothing else. Do not wrap the SQL query in any other text, not even backticks.

    For example:
    Question: List all inactive users from the 'users' table.
    SQL Query: SELECT * FROM users WHERE status = 'inactive';

    Question: Retrieve the details of products priced above $50.
    SQL Query: SELECT * FROM products WHERE price > 50;

    Question: Find the total number of orders placed in the last 7 days.
    SQL Query: SELECT COUNT(*) AS total_orders FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '7 days';

    Question: Show the names of products that are in stock and have a quantity greater than 100.
    SQL Query: SELECT product_name FROM products WHERE stock > 0 AND quantity > 100;

    Question: Find the top 5 products by revenue.
    SQL Query: SELECT product_name, SUM(price * quantity) AS revenue FROM sales GROUP BY product_name ORDER BY revenue DESC LIMIT 5;

    Question: List all users who have not made any purchases in the last 30 days.
    SQL Query: SELECT user_id, user_name FROM users LEFT JOIN purchases ON users.user_id = purchases.user_id WHERE purchases.purchase_date IS NULL OR purchases.purchase_date < CURRENT_DATE - INTERVAL '30 days';

    Question: Retrieve the average order value for each month in the current year.
    SQL Query: SELECT DATE_TRUNC('month', order_date) AS month, AVG(order_value) AS average_order_value FROM orders WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY month ORDER BY month;

    Question: Find the employee with the highest salary in each department.
    SQL Query: SELECT department_id, employee_id, employee_name, MAX(salary) AS highest_salary FROM employees GROUP BY department_id, employee_id, employee_name;

    Question: Count the number of distinct customers who have made purchases in the last 90 days.
    SQL Query: SELECT COUNT(DISTINCT customer_id) AS num_customers FROM purchases WHERE purchase_date >= CURRENT_DATE - INTERVAL '90 days';

    Question: List the product names and their corresponding stock levels, sorted by stock level in ascending order.
    SQL Query: SELECT product_name, stock FROM products ORDER BY stock ASC;

    Question: Show the total number of orders and total revenue generated by each customer.
    SQL Query: SELECT customer_id, COUNT(order_id) AS total_orders, SUM(order_value) AS total_revenue FROM orders GROUP BY customer_id;

    Question: Find the most recent order date for each product.
    SQL Query: SELECT product_id, MAX(order_date) AS most_recent_order FROM orders GROUP BY product_id;

    Question: Retrieve the top 10 cities with the highest number of registered users.
    SQL Query: SELECT city, COUNT(user_id) AS num_users FROM users GROUP BY city ORDER BY num_users DESC LIMIT 10;

    Question: List all the employees who joined in the last 6 months.
    SQL Query: SELECT employee_id, employee_name, hire_date FROM employees WHERE hire_date >= CURRENT_DATE - INTERVAL '6 months';

    Question: Retrieve the number of new patients registered each month for the current year.
    SQL Query: SELECT DATE_TRUNC('month', registration_date) AS month, COUNT(patient_id) AS new_patients FROM patients WHERE EXTRACT(YEAR FROM registration_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY month ORDER BY month;

    Question: Find the total number of consultations and average consultation duration for each healthcare facility.
    SQL Query: SELECT facility_id, COUNT(consultation_id) AS total_consultations, AVG(duration) AS avg_duration FROM consultations GROUP BY facility_id;

    Question: List all health facilities with more than 50 reported cases of malaria in the last quarter.
    SQL Query: SELECT facility_id, COUNT(case_id) AS malaria_cases FROM cases WHERE disease = 'Malaria' AND report_date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY facility_id HAVING COUNT(case_id) > 50;

    Question: Show the top 5 districts with the highest incidence of maternal mortality rates.
    SQL Query: SELECT district_id, SUM(maternal_deaths) / COUNT(births) AS mortality_rate FROM maternal_health GROUP BY district_id ORDER BY mortality_rate DESC LIMIT 5;

    Question: Retrieve the average wait time for patients in emergency departments across all hospitals.
    SQL Query: SELECT hospital_id, AVG(wait_time) AS avg_wait_time FROM emergency_visits GROUP BY hospital_id;

    Question: Count the number of cases reported for each type of infectious disease in the last year.
    SQL Query: SELECT disease_type, COUNT(case_id) AS num_cases FROM cases WHERE report_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY disease_type;

    Question: Find the number of healthcare workers who completed their training in the past 6 months.
    SQL Query: SELECT COUNT(worker_id) AS trained_workers FROM training_records WHERE completion_date >= CURRENT_DATE - INTERVAL '6 months';

    Question: List all the regions with the highest number of vaccination campaigns conducted this year.
    SQL Query: SELECT region_id, COUNT(campaign_id) AS num_campaigns FROM vaccination_campaigns WHERE EXTRACT(YEAR FROM campaign_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY region_id ORDER BY num_campaigns DESC;

    Question: Show the percentage of patients with chronic diseases who received follow-up care in the past 3 months.
    SQL Query: SELECT (COUNT(DISTINCT follow_up_patient_id) * 100.0 / (SELECT COUNT(DISTINCT patient_id) FROM chronic_disease_patients)) AS percentage_follow_up FROM follow_up_records WHERE follow_up_date >= CURRENT_DATE - INTERVAL '3 months';

    Question: Retrieve the total expenditures on medical supplies by each healthcare facility this year.
    SQL Query: SELECT facility_id, SUM(expenditure_amount) AS total_expenditure FROM medical_supplies_expenses WHERE EXTRACT(YEAR FROM expense_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY facility_id;

    Question: List all patients who have missed more than 3 scheduled appointments in the last 6 months.
    SQL Query: SELECT patient_id, COUNT(appointment_id) AS missed_appointments FROM appointments WHERE appointment_status = 'Missed' AND appointment_date >= CURRENT_DATE - INTERVAL '6 months' GROUP BY patient_id HAVING COUNT(appointment_id) > 3;

    Question: Find the average number of days patients wait for surgery across different hospitals.
    SQL Query: SELECT hospital_id, AVG(DATE_PART('day', surgery_date - consultation_date)) AS avg_wait_days FROM surgeries GROUP BY hospital_id;

    Question: Retrieve the distribution of reported symptoms among patients with respiratory infections this year.
    SQL Query: SELECT symptom, COUNT(patient_id) AS num_patients FROM respiratory_infection_cases WHERE EXTRACT(YEAR FROM report_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY symptom;

    Question: List the top 10 most common chronic conditions diagnosed in the last 12 months.
    SQL Query: SELECT condition, COUNT(patient_id) AS num_cases FROM chronic_conditions WHERE diagnosis_date >= CURRENT_DATE - INTERVAL '12 months' GROUP BY condition ORDER BY num_cases DESC LIMIT 10;


    Your turn:

    Question: {question}
    SQL Query:
    """

    prompt = ChatPromptTemplate.from_template(template)

    llm = ChatGroq(model="llama-3.1-70b-versatile", temperature=0.2) #llama3-8b-8192 OR #mixtral-8x7b-32768

    def get_schema(_):
        return db.get_table_info()

    return (
        RunnablePassthrough.assign(schema=get_schema)
        | prompt
        | llm
        | StrOutputParser()
    )

# Function to get response to user query
def get_response(user_query: str, db: SQLDatabase, chat_history: list):
    sql_chain = get_sql_chain(db)

    template = """
    You are a senior data analyst at MERQ Consultancy. You are interacting with a user who is asking questions about the HISPMD database.
    Based on the table schema below, along with the user's question, SQL query, and SQL response, write a natural language response.

    <SCHEMA>{schema}</SCHEMA>

    Conversation History: {chat_history}
    SQL Query: <SQL>{query}</SQL>
    User Question: {question}
    SQL Response: {response}

    Write a clear and concise explanation that answers the user's question based on the SQL response and schema. Make sure your response is understandable and provides context to the user.
    """


    prompt = ChatPromptTemplate.from_template(template)

    llm = ChatGroq(model="llama-3.1-70b-versatile", temperature=0.2) #llama3-8b-8192 OR #mixtral-8x7b-32768

    chain = (
        RunnablePassthrough.assign(query=sql_chain).assign(
            schema=lambda _: db.get_table_info(),
            response=lambda vars: run_query(db, vars["query"]),
        )
        | prompt
        | llm
        | StrOutputParser()
    )

    return chain.invoke({
        "question": user_query,
        "chat_history": chat_history,
    })

# Function to create a line chart
def create_line_chart(data, x, y, title):
    plt.figure(figsize=(10, 6))
    sns.lineplot(x=x, y=y, data=data, marker='o')
    plt.title(title)
    plt.xticks(rotation=45)
    st.pyplot()

# Function to create a bar chart
def create_bar_chart(data, x, y, title):
    plt.figure(figsize=(10, 6))
    sns.barplot(x=x, y=y, data=data)
    plt.title(title)
    plt.xticks(rotation=45)
    st.pyplot()

# Function to create a pie chart
def create_pie_chart(data, labels, title):
    plt.figure(figsize=(10, 6))
    plt.pie(data, labels=labels, autopct='%1.1f%%', startangle=140)
    plt.title(title)
    st.pyplot()

# Streamlit UI
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="Hello! I'm MERQ AI Data Assistant. Ask me anything about your HISPMD System Data."),
    ]

st.set_page_config(page_title="Chat with HISPMD", page_icon=":speech_balloon:")

st.title("Chat with MERQ-AI Data Assistant")

with st.sidebar:
    st.header("AI-powered analysis and interpretation")
    st.subheader("Instructions")
    st.write("This is a simple chat application using the HISPMD Data. Tap/Click on the button below to start chatting.")

    if st.button("Click Here To START"):
        with st.spinner("Connecting to MERQ AI..."):
            db = init_database()
            st.session_state.db = db
            st.success("Connected to MERQ AI!")

for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI"):
            st.markdown(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.markdown(message.content)

user_query = st.chat_input("Type a message...")
if user_query is not None and user_query.strip() != "":
    st.session_state.chat_history.append(HumanMessage(content=user_query))

    with st.chat_message("Human"):
        st.markdown(user_query)

    with st.chat_message("AI"):
        response = get_response(user_query, st.session_state.db, st.session_state.chat_history)
        st.markdown(response)

        # Data visualization based on response
        if "SELECT" in user_query.upper() and "GRAPH:" in response:
            lines = response.split('\n')
            graph_type = None
            for line in lines:
                if "Graph:" in line:
                    graph_type = line.split(':')[-1].strip()
                    break
            
            if graph_type == 'Line graph':
                df = pd.DataFrame(run_query(st.session_state.db, user_query))
                if not df.empty:
                    create_line_chart(df, df.columns[0], df.columns[1], "Line Chart")
            
            elif graph_type == 'Bar chart':
                df = pd.DataFrame(run_query(st.session_state.db, user_query))
                if not df.empty:
                    create_bar_chart(df, df.columns[0], df.columns[1], "Bar Chart")
            
            elif graph_type == 'Pie chart':
                data = run_query(st.session_state.db, user_query)
                labels = [str(item[0]) for item in data]
                values = [float(item[1]) for item in data]
                create_pie_chart(values, labels, "Pie Chart")

    st.session_state.chat_history.append(AIMessage(content=response))
